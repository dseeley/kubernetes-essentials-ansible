---

- block:
    - name: apiserver-lb-awsnlb | Delete the N/ELB
      elb_network_lb:
        aws_access_key: "{{ cluster_vars[buildenv].aws_access_key }}"
        aws_secret_key: "{{ cluster_vars[buildenv].aws_secret_key }}"
        region: "{{cluster_vars.region}}"
        name: "{{cluster_name}}-apiserver"
        state: absent

    - name: apiserver-lb-awsnlb | Delete the elb_target_group
      elb_target_group:
        aws_access_key: "{{ cluster_vars[buildenv].aws_access_key }}"
        aws_secret_key: "{{ cluster_vars[buildenv].aws_secret_key }}"
        region: "{{cluster_vars.region}}"
        name: "{{cluster_name}}-apiserver"
        state: absent

    - block:
        - name: apiserver-lb-awsnlb | Gather info for pre-existing Hosted Zones (public and/or private)
          route53_info:
            aws_access_key: "{{cluster_vars[buildenv].aws_access_key}}"
            aws_secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
            query: hosted_zone
          register: r__route53_info__zones

        - name: apiserver-lb-awsnlb | Get CNAME records
          route53:
            aws_access_key: "{{cluster_vars[buildenv].aws_access_key}}"
            aws_secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
            state: "get"
            zone: "{{cluster_vars.dns_nameserver_zone}}"
            record: "{{ apiserver.url | urlsplit('hostname') }}"
            type: "CNAME"
            private_zone: "{{ item.Config.PrivateZone }}"
          register: r__route53_cname
          ignore_errors: yes
          with_items: "{{ r__route53_info__zones.HostedZones | json_query(\"[?Name==`\" + cluster_vars.dns_nameserver_zone + \".`]\") }}"

        - name: apiserver-lb-awsnlb | debug r__route53_cname
          debug: msg={{r__route53_cname}}

        - name: apiserver-lb-awsnlb | Delete CNAME records
          route53:
            aws_access_key: "{{cluster_vars[buildenv].aws_access_key}}"
            aws_secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
            state: "absent"
            zone: "{{ item.set.zone }}"
            record: "{{ item.set.record }}"
            type: "{{ item.set.type }}"
            ttl: "{{ item.set.ttl }}"
            value: ["{{ item.set.value }}"]
            private_zone: "{{ item.item.Config.PrivateZone }}"
          with_items: "{{ r__route53_cname.results }}"
          when: (item.failed == false)  and  (item.1.set.value is defined)  and  (item.set.keys()|length)
      when: cluster_vars.dns_server == "route53"
  when: apiserver.lb_ha_mgr == "awsnlb"
