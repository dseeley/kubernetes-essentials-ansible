---

- name: node/hostconfig
  block:
    - name: node/hostconfig | Disable swap for current session
      become: yes
      command: swapoff -a

    - name: node/hostconfig | Remove swapfile from /etc/fstab
      become: yes
      mount:
        name: "{{ item }}"
        fstype: swap
        state: absent
      with_items: ["swap", "none"]

- name: node | Run cloud-specific VIP config (if defined)
  include_tasks: "{{item}}"
  with_first_found: [{ files: ["vips_{{cluster_vars.type}}.yml"], skip: true }]

- name: node | install node-dependent packages
  become: yes
  apt:
    update_cache: yes
    name: ['conntrack', 'ipset']
    state: present

- name: node | install container runtime
  include_tasks: config-containerd.yml

- name: node | install and configure kubelet
  include_tasks: config-kubelet.yml

- name: node | install container kube-proxy
  include_tasks: config-kube-proxy.yml

- name: node | flush handlers
  meta: flush_handlers

- name: node | Wait for nodes to be ready
  become: yes
  delegate_to: "{{groups['controller'][0]}}"
  uri:
    url: "{% if apiserver.url is defined and apiserver.url != '' %}{{ apiserver.url }}{% elif apiserver.keepalived.vip_cidr is defined and apiserver.keepalived.vip_cidr != '' %}https://{{apiserver.keepalived.vip_cidr | ipaddr('address')}}{% endif %}:{{apiserver.secure_port}}/api/v1/nodes/"
    method: GET
    status_code: 200
    validate_certs: no
    ca_path: "{{k8s_home_kube_dir}}/{{cluster_name}}/ca-crt.pem"
    client_cert: "{{k8s_home_kube_dir}}/{{cluster_name}}/admin-crt.pem"
    client_key: "{{k8s_home_kube_dir}}/{{cluster_name}}/admin-key.pem"
    return_content: yes
  run_once: yes
  register: r__clusternodes_result
  until: "r__clusternodes_result.status == 200  and  'json' in r__clusternodes_result  and  (not r__clusternodes_result.json['items'] | json_query(\"[].metadata.name\") | symmetric_difference(play_hosts))"
  retries: 60     #5 minutes
  delay: 5

- name: node/worker | label all nodes with 'node' role
  become: yes
  delegate_to: "{{groups['controller'][0]}}"
  shell: "kubectl patch node {{ansible_hostname}} --patch '{{resource_definition| to_json}}'"
#  k8s:
#    kubeconfig: "{{k8s_home_kube_dir}}/config"
#    validate: { fail_on_error: yes }
#    resource_definition: "{{resource_definition}}"
  vars:
    resource_definition:
      apiVersion: v1
      kind: Node
      metadata:
        name: "{{ansible_hostname}}"
        labels:
          node-role.kubernetes.io/node: 'true'

- name: node/edge | label and taint node-edge nodes with 'edge_ingress.node_role_name' role
  become: yes
  delegate_to: "{{groups['controller'][0]}}"
  shell: "cat <<EOF | kubectl apply -f -\n{{resource_definition | to_yaml}}\nEOF"
#  k8s:
#    kubeconfig: "{{k8s_home_kube_dir}}/config"
#    validate: { fail_on_error: yes }
#    resource_definition: "{{resource_definition}}"
  vars:
    resource_definition:
      apiVersion: v1
      kind: Node
      metadata:
        name: "{{ansible_hostname}}"
        labels: "{{ { 'node-role.kubernetes.io/' + edge_ingress.node_role_name: 'true' } }}"
      spec:
        taints:
          - key: "node-role.kubernetes.io/{{edge_ingress.node_role_name}}"
            value: "true"
            effect: NoExecute
  when: groups['node-edge'] is defined and inventory_hostname in groups['node-edge']


- name: node/edge/controller/haproxy-ingress | apply config
  become: yes
  delegate_to: "{{groups['controller'][0]}}"
  shell: "cat <<EOF | kubectl apply -f -\n{{item}}\nEOF"
#  k8s:
#    kubeconfig: "{{k8s_home_kube_dir}}/config"
#    apply: yes
#    validate: { fail_on_error: yes }
#    resource_definition: "{{ item | from_yaml }}"
  loop: "{{ lookup('template', 'templates/haproxy-ingress.yml.j2').split('---') | select() }}"
  run_once: true
  when: edge_ingress.controller == "haproxy-ingress"

- name: node/edge/vip/keepalived-vip | apply config
  become: yes
  delegate_to: "{{groups['controller'][0]}}"
  shell: "cat <<EOF | kubectl apply -f -\n{{item}}\nEOF"
#  k8s:
#    kubeconfig: "{{k8s_home_kube_dir}}/config"
#    apply: yes
#    validate: { fail_on_error: yes }
#    resource_definition: "{{ item | from_yaml }}"
  loop: "{{ lookup('template', 'templates/kube-keepalived-vip.yaml.j2').split('---') | select() }}"
  run_once: true
  when: edge_ingress.ha_mgr == "kube-keepalived-vip"  and  edge_ingress.keepalived.vip_cidr is defined and edge_ingress.keepalived.vip_cidr != ""


#- name: node/edge/controller/gcp | Install application loadbalancer
#  include_tasks: gce-lb-apps.yml
#  when: edge_ingress.controller == "gcp_external"
