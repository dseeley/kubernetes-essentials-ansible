---

- name: sslcerts/kubelet
  block:
    - block:
        - name: "sslcerts/kubelet | Create {{ playbook_certs_k8s_file | dirname }} directory"
          file: { path: "{{ playbook_certs_k8s_file | dirname }}", state: directory }
          run_once: yes

        - name: sslcerts/kubelet | Generate RSA private key
          community.crypto.openssl_privatekey_pipe:
          register: r__openssl_privatekey_pipe
          no_log: true

        - name: sslcerts/kubelet | Generate CSR
          community.crypto.openssl_csr_pipe:
            privatekey_content: "{{r__openssl_privatekey_pipe.privatekey}}"
            key_usage: ["cRLSign", "digitalSignature", "keyCertSign", "keyEncipherment"]
            key_usage_critical: yes
            extended_key_usage: ["clientAuth", "serverAuth"]
            extended_key_usage_critical: yes
            subject: { CN: "system:node:{{ansible_hostname}}", "O": "system:nodes", OU: "{{cluster_name}}" }
            subject_alt_name: "{{ kubelet_dns_san }}"
          register: r__openssl_csr_pipe
          vars:
            kubelet_dns_san: |-
              {%- if (apiserver.lb_ha_mgr == "keepalived_ipvs") and (groups['node-edge'] is defined and inventory_hostname in groups['node-edge']) -%}
                {%- for host in groups['node-edge'] | sort() -%}DNS:{{host}}{% if not loop.last %},{% endif %}{% endfor %}
              {%- else -%}
                DNS:{{ansible_hostname}}
              {%- endif -%}

        - name: sslcerts/kubelet | Generate the self-signed certificate
          community.crypto.x509_certificate_pipe:
            provider: ownca
            ownca_content: "{{ssl_ca['ca-crt.pem']}}"
            ownca_privatekey_content: "{{ssl_ca['ca-key.pem']}}"
            csr_content: "{{r__openssl_csr_pipe.csr}}"
            selfsigned_not_after: "+3652d"       # Expiry in 10 years (incl leap years)
          register: r__x509_certificate_pipe

        - name: sslcerts/kubelet | Vault-encrypt the CA privatekey
          ansible_vault:
            plaintext: "{{r__openssl_privatekey_pipe.privatekey}}"
            action: encrypt
          register: r__ansible_vault_encrypt_ca_privatekey

        - name: sslcerts/kubelet | Create playbook_certs_k8s_file after combining the existing 'k8s_certs' with the new kubelet crt/key for each of 'play_hosts'
          copy:
            content: "{{ k8s_certs_combined | to_yaml_vaulted }}"
            dest: "{{ playbook_certs_k8s_file }}"
            force: yes
          vars:
            k8s_certs_combined: |-
              {%- set k8s_certs_combined = {'k8s_certs': k8s_certs |default({})|to_yaml_vaulted|from_yaml_vaulted} -%}
              {%- for host_key in play_hosts | sort() -%}
                {%- if hostvars[host_key].r__x509_certificate_pipe.certificate is defined and hostvars[host_key].r__ansible_vault_encrypt_ca_privatekey.vaulttext is defined -%}
                  {%- set _k8s_certs_to_combine = { 'kubelet-crt-'+host_key+'.pem': hostvars[host_key].r__x509_certificate_pipe.certificate, 'kubelet-key-'+host_key+'.pem': hostvars[host_key].r__ansible_vault_encrypt_ca_privatekey.vaulttext } %}
                  {%- set _ = k8s_certs_combined.k8s_certs.update(_k8s_certs_to_combine) -%}
                {%- endif -%}
              {%- endfor -%}
              {{ k8s_certs_combined }}
          notify: ["restart kubelet"]

        - name: "sslcerts/kubelet | Reload {{ playbook_certs_k8s_file }}"
          include_vars: "{{ playbook_certs_k8s_file }}"
      delegate_to: localhost
      when: (k8s_certs is not defined) or (k8s_certs[key_varname] is not defined) or (k8s_certs[crt_varname] is not defined) or (recreate_certs is defined and recreate_certs|bool)


    - name: sslcerts/kubelet | Copy keys/certs to remotes
      block:
        - name: sslcerts/kubelet | create kubernetes cert directory on remotes
          file: path="{{k8s_cert_dir}}" state=directory

        - name: sslcerts/kubelet | Copy keys/certs to remotes
          copy:
            content: "{{ item.val }}"
            dest: "{{ k8s_cert_dir }}/{{ item.key }}"
            mode:  "{{ item.mode }}"
          no_log: true
          with_items:
            - { key: "{{crt_varname}}", val: "{{k8s_certs[crt_varname]}}", mode: '0644'}
            - { key: "{{key_varname}}", val: "{{k8s_certs[key_varname]}}", mode: '0600'}
            - { key: 'ca-crt.pem', val: "{{ssl_ca['ca-crt.pem']}}", mode: '0644'}
      become: yes
  vars:
    crt_varname: "kubelet-crt-{{ansible_hostname}}.pem"
    key_varname: "kubelet-key-{{ansible_hostname}}.pem"
