---


- name: node/config/containerd | Download and unarchive containerd
  become: yes
  unarchive:
    remote_src: yes
    src: "{{ containerd_artifact_location }}"
    dest: /usr/local
    mode: 0755
    creates: "/usr/local/bin/containerd"
  notify: ["restart containerd"]

- name: node/config/containerd | Download runc
  become: yes
  get_url:
    url: "{{ runc_artifact_location }}"
    dest: "/usr/local/sbin/runc"
    mode: 0755
  register: r__get_url_runc
  notify: ["restart containerd"]

- name: node/config/containerd | Download and unarchive cni plugin
  block:
    - name: "node/config/containerd | create cni plugins dir ({{cni_plugins_dest_dir}})"
      become: yes
      file: { path: "{{cni_plugins_dest_dir}}", state: directory }

    - name: node/config/containerd | Download and unarchive cni plugin
      become: yes
      unarchive:
        remote_src: yes
        src: "{{ cni_plugin_artifact_location }}"
        dest: "{{cni_plugins_dest_dir}}"
        mode: 0755
        creates: "{{cni_plugins_dest_dir}}/loopback"
      notify: ["restart containerd"]
  vars:
    cni_plugins_dest_dir: "/opt/cni/bin"


#- name: node/config/containerd | Configure CNI Networking / Create the bridge network configuration file
#  become: yes
#  copy:
#    content: |
#      {
#        "cniVersion": "0.4.0",
#        "name": "bridge",
#        "type": "bridge",
#        "bridge": "cnio0",
#        "isGateway": true,
#        "ipMasq": true,
#        "ipam": {
#          "type": "host-local",
#          "ranges": [
#            [{"subnet": "{{k8s_network.cluster_cidr}}"}]
#          ],
#          "routes": [{"dst": "0.0.0.0/0"}]
#        }
#      }
#    dest: "/etc/cni/net.d/10-bridge.conf"
#    force: yes
#  notify: ["restart containerd"]
#
#- name: node/config/containerd | Configure CNI Networking / Create the loopback network configuration file
#  become: yes
#  copy:
#    content: |
#      {
#        "cniVersion": "0.4.0",
#        "name": "lo",
#        "type": "loopback"
#      }
#    dest: "/etc/cni/net.d/99-loopback.conf"
#    force: yes
#  notify: ["restart containerd"]

- name: node/config/containerd | Create the containerd.service systemd unit file
  become: yes
  copy:
    content: |
      [Unit]
      Description=containerd container runtime
      Documentation=https://containerd.io
      After=network.target local-fs.target

      [Service]
      #uncomment to enable the experimental sbservice (sandboxed) version of containerd/cri integration
      #Environment="ENABLE_CRI_SANDBOXES=sandboxed"
      ExecStartPre=-/sbin/modprobe overlay
      ExecStart="/usr/local/bin/containerd"

      Type=notify
      Delegate=yes
      KillMode=process
      Restart=always
      RestartSec=5
      # Having non-zero Limit*s causes performance problems due to accounting overhead
      # in the kernel. We recommend using cgroups to do container-local accounting.
      LimitNPROC=infinity
      LimitCORE=infinity
      LimitNOFILE=infinity
      # Comment TasksMax if your systemd version does not supports it.
      # Only systemd 226 and above support this version.
      TasksMax=infinity
      OOMScoreAdjust=-999

      [Install]
      WantedBy=multi-user.target
    dest: "/etc/systemd/system/containerd.service"
    force: yes
  notify: ["reload node systemd", "restart containerd"]