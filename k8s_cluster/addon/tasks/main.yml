---

- name: addon/flannel | apply config
  k8s:
    kubeconfig: "{{k8s_home_kube_dir}}/config"
    apply: yes
    resource_definition: "{{ item | from_yaml }}"
    validate: { fail_on_error: yes }
  loop: "{{ lookup('template', 'templates/kube-flannel.yml.j2').split('---') | select() }}"
  when: flannel_version is defined  and  flannel_version != ""

- block:
    - name: addon/coredns | apply config
      k8s:
        kubeconfig: "{{k8s_home_kube_dir}}/config"
        apply: yes
        resource_definition: "{{ item | from_yaml }}"
        validate: { fail_on_error: yes }
      loop: "{{ lookup('template', 'templates/coredns.yml.j2').split('---') | select() }}"

    - block:
        - name: addon/coredns | get existing pods
          k8s_info:
            kubeconfig: "{{k8s_home_kube_dir}}/config"
            kind: Pod
            namespace: "kube-system"
            label_selectors: ["k8s-app = kube-dns"]
          register: r__k8s_info_coredns

        - name: addon/coredns | delete pods if we're recreating the certs
          k8s:
            kubeconfig: "{{k8s_home_kube_dir}}/config"
            kind: Pod
            namespace: "{{ item | json_query(\"metadata.namespace\") }}"
            name: "{{ item | json_query(\"metadata.name\") }}"
            state: absent
          with_items: "{{r__k8s_info_coredns.resources[]}}"
      when: (recreate_certs is defined and recreate_certs|bool)


