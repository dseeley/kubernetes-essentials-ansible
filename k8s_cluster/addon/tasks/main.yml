---

- name: addon/flannel | apply config
  become: yes
  shell: "cat <<EOF | kubectl apply -f -\n{{item}}\nEOF"
#  k8s:
#    kubeconfig: "{{k8s_home_kube_dir}}/config"
#    apply: yes
#    resource_definition: "{{ item | from_yaml }}"
#    validate: { fail_on_error: yes }
  loop: "{{ lookup('template', 'templates/kube-flannel.yml.j2').split('---') | select() }}"
  when: flannel_version is defined  and  flannel_version != ""
  run_once: yes

- name: addon | Wait for nodes to be *Ready*
  block:
    - name: addon | Wait for nodes to be *Ready*
      become: yes
      uri:
        url: "{% if apiserver.url is defined and apiserver.url != '' %}{{ apiserver.url }}{% elif apiserver.keepalived.vip_cidr is defined and apiserver.keepalived.vip_cidr != '' %}https://{{apiserver.keepalived.vip_cidr | ansible.utils.ipaddr('address')}}{% endif %}:{{apiserver.secure_port}}/api/v1/nodes/"
        method: GET
        status_code: 200
        validate_certs: no
        ca_path: "{{k8s_home_kube_dir}}/{{cluster_name}}/ca-crt.pem"
        client_cert: "{{k8s_home_kube_dir}}/{{cluster_name}}/admin-crt.pem"
        client_key: "{{k8s_home_kube_dir}}/{{cluster_name}}/admin-key.pem"
        return_content: yes
      run_once: yes
      register: r__clusternodes_result
      until: >
        r__clusternodes_result.status == 200  and
        'json' in r__clusternodes_result  and
        (not r__clusternodes_result.json['items'] | json_query("[].metadata.name") | symmetric_difference(groups['node-worker'] + groups['node-edge']))  and 
        (r__clusternodes_result | json_query("json.items[].status.conditions[?type==`Ready` && status==`False`][] | length(@)") == 0)
      retries: 60     #5 minutes
      delay: 5

    - name: addon | nodes status
      debug:
        msg: "{{r__clusternodes_result}}"
      run_once: yes

#- name: addon/gcp_lb | Install application loadbalancer
#  include_tasks: gce-lb-apps.yml
#  when: edge_ingress.controller == "gcp_external"

- name: addon/haproxy-ingress | apply config
  become: yes
  delegate_to: "{{groups['controller'][0]}}"
  shell: "cat <<EOF | kubectl apply -f -\n{{item}}\nEOF"
  #  k8s:
  #    kubeconfig: "{{k8s_home_kube_dir}}/config"
  #    apply: yes
  #    validate: { fail_on_error: yes }
  #    resource_definition: "{{ item | from_yaml }}"
  loop: "{{ lookup('template', 'templates/haproxy-ingress.yml.j2').split('---') | select() }}"
  run_once: true
  when: edge_ingress.controller == "haproxy-ingress"

- name: addon/keepalived-vip | apply config
  become: yes
  delegate_to: "{{groups['controller'][0]}}"
  shell: "cat <<EOF | kubectl apply -f -\n{{item}}\nEOF"
  #  k8s:
  #    kubeconfig: "{{k8s_home_kube_dir}}/config"
  #    apply: yes
  #    validate: { fail_on_error: yes }
  #    resource_definition: "{{ item | from_yaml }}"
  loop: "{{ lookup('template', 'templates/kube-keepalived-vip.yaml.j2').split('---') | select() }}"
  run_once: true
  when: edge_ingress.ha_mgr == "kube-keepalived-vip"  and  edge_ingress.keepalived.vip_cidr is defined and edge_ingress.keepalived.vip_cidr != ""


- name: addon/coredns
  block:
    - name: addon/coredns | apply config
      become: yes
      shell: "cat <<EOF | kubectl apply -f -\n{{item}}\nEOF"
#      k8s:
#        kubeconfig: "{{k8s_home_kube_dir}}/config"
#        apply: yes
#        resource_definition: "{{ item | from_yaml }}"
#        validate: { fail_on_error: yes }
      loop: "{{ lookup('template', 'templates/coredns.yml.j2').split('---') | select() }}"
      run_once: yes

#    - name: addon/coredns | apply k8s_gateway config   ##Can't get this to work.  Instead, just define a wildcard DNS entry pointing to the external Lb
#      become: yes
#      shell: "cat <<EOF | kubectl apply -f -\n{{item}}\nEOF"
##      k8s:
##        kubeconfig: "{{k8s_home_kube_dir}}/config"
##        apply: yes
##        resource_definition: "{{ item | from_yaml }}"
##        validate: { fail_on_error: yes }
#      loop: "{{ lookup('template', 'templates/coredns__k8s_gateway.yml.j2').split('---') | select() }}"
#      run_once: yes
#      when: cluster_vars.dns_user_domain is defined  and  cluster_vars.dns_user_domain != ""

    - block:
        - name: addon/coredns | get existing pods
          become: yes
          delegate_to: "{{groups['controller'][0]}}"
          k8s_info:
            kubeconfig: "{{k8s_home_kube_dir}}/config"
            kind: Pod
            namespace: "kube-system"
            label_selectors: ["k8s-app = kube-dns"]
          run_once: yes
          register: r__k8s_info_coredns

        - name: addon/coredns | delete pods if we're recreating the certs
          become: yes
          delegate_to: "{{groups['controller'][0]}}"
          k8s:
            kubeconfig: "{{k8s_home_kube_dir}}/config"
            kind: Pod
            namespace: "{{ item.metadata.namespace }}"
            name: "{{ item.metadata.name }}"
            state: absent
          run_once: yes
          with_items: "{{r__k8s_info_coredns.resources}}"
      when: (recreate_certs is defined and recreate_certs|bool)


- name: addon/descheduler | apply config
  become: yes
  shell: "cat <<EOF | kubectl apply -f -\n{{item}}\nEOF"
  #  k8s:
  #    kubeconfig: "{{k8s_home_kube_dir}}/config"
  #    apply: yes
  #    resource_definition: "{{ item | from_yaml }}"
  #    validate: { fail_on_error: yes }
  loop: "{{ lookup('template', 'templates/descheduler.yml.j2').split('---') | select() }}"
  run_once: yes
