---

k8s_version: 1.29.0
k8s_artifact_location: "https://storage.googleapis.com/kubernetes-release/release/v{{k8s_version}}/bin/linux/{{'amd64' if ansible_architecture == 'x86_64' else 'arm64' if ansible_architecture == 'aarch64' else ansible_architecture}}"

### containerd
containerd_version: 1.7.11
containerd_artifact_location: "https://github.com/containerd/containerd/releases/download/v{{containerd_version}}/containerd-{{containerd_version}}-linux-{{'amd64' if ansible_architecture == 'x86_64' else 'arm64' if ansible_architecture == 'aarch64' else ansible_architecture}}.tar.gz"

runc_version: 1.1.11
runc_artifact_location: "https://github.com/opencontainers/runc/releases/download/v{{runc_version}}/runc.{{'amd64' if ansible_architecture == 'x86_64' else 'arm64' if ansible_architecture == 'aarch64' else ansible_architecture}}"

cni_plugin_version: 1.4.0
cni_plugin_artifact_location: "https://github.com/containernetworking/plugins/releases/download/v{{cni_plugin_version}}/cni-plugins-linux-{{'amd64' if ansible_architecture == 'x86_64' else 'arm64' if ansible_architecture == 'aarch64' else ansible_architecture}}-v{{cni_plugin_version}}.tgz"

nerdctl_version: 1.7.2
nerdctl_artifact_location: "https://github.com/containerd/nerdctl/releases/download/v{{nerdctl_version}}/nerdctl-{{nerdctl_version}}-linux-{{'amd64' if ansible_architecture == 'x86_64' else 'arm64' if ansible_architecture == 'aarch64' else ansible_architecture}}.tar.gz"
### containerd

k8s_network:
  cluster_cidr: 10.234.0.0/16         # Overall pod network range for entire cluster
  node_subnet_len: 24                 # portion of cluster_cidr, per node
  service_ip_cidr: 10.233.0.0/18      # ip range for cluster services
  dns_ip: 10.233.0.10                 # Cluster DNS server IP (coredns).  Must be from {{k8s_network.service_ip_cidr}} - traditionally x.x.x.10
  cluster_tld: "kubernetes"           # Cluster DNS TLD

flannel_version: v0.24.0

descheduler_version: v0.28.1

coredns_image: registry.k8s.io/coredns/coredns:v1.11.1

kube_dashboard_image: kubernetesui/dashboard:v2.7.0

apiserver:
  url: "{% if cluster_vars.dns_server is defined and cluster_vars.dns_server != '' %}https://{{cluster_name}}-apiserver.{{cluster_vars.dns_nameserver_zone}}{% endif %}"
  secure_port: 443
  lb_ha_mgr: ""         # The load-balancing/HA solution for apiserver (because of https://github.com/kubernetes/kubernetes/issues/18174).  e.g.: keepalived_ipvs, awsnlb, gcp_dns_healthcheck
  keepalived:
    vip_cidr: ""        # MUST be present for apiserver.lb_ha_mgr="keepalived_ipvs"

edge_ingress:
  node_role_name: "edge-ingress"
  controller: ""        # The Ingress Controller.  e.g.: haproxy-ingress
  ha_mgr: ""            # The HA mechanism for node-edge (ingress) nodes.  e.g.: kube-keepalived-vip, awsnlb, gcp_dns_healthcheck
  keepalived:
    vip_cidr: ""        # MUST be present for edge_ingress.ha_mgr="kube-keepalived-vip"

k8s_bin_dir: /opt/kubernetes
k8s_config_dir: /etc/kubernetes
k8s_cert_dir: "{{k8s_config_dir}}/pki"
k8s_home_kube_dir: "${HOME}/.kube"     # Use ${HOME} instead of ~/.kube for localhost, because ~ is not expanded by kubectl

playbook_ca_yaml: "{{playbook_dir}}/cluster_defs/{{ cloud_type }}/{{ clusterid | default() }}/{{ region }}/{{ buildenv }}/_ssl/ca.yml"
playbook_certs_k8s_file: "{{playbook_dir}}/cluster_defs/{{ cloud_type }}/{{ clusterid | default() }}/{{ region }}/{{ buildenv }}/_ssl/k8s_certs_{{cluster_suffix}}.yml"

# all certificates for cluster
ca_crt_filepath: "{{k8s_cert_dir}}/ca-crt.pem"
ca_key_filepath: "{{k8s_cert_dir}}/ca-key.pem"
apiserver_crt_filepath: "{{k8s_cert_dir}}/apiserver-crt.pem"
apiserver_key_filepath: "{{k8s_cert_dir}}/apiserver-key.pem"
admin_crt_filepath: "{{k8s_cert_dir}}/admin-crt.pem"
admin_key_filepath: "{{k8s_cert_dir}}/admin-key.pem"
serviceaccount_crt_filepath: "{{k8s_cert_dir}}/serviceaccount-crt.pem"
serviceaccount_key_filepath: "{{k8s_cert_dir}}/serviceaccount-key.pem"

etcd_version: v3.5.9
etcd:
  client_cert_file: &etcd_cert_file "{{k8s_cert_dir}}/etcd-crt.pem"
  client_key_file: &etcd_key_file "{{k8s_cert_dir}}/etcd-key.pem"
  client_trusted_ca_file: &etcd_trusted_ca_file "{{ca_crt_filepath}}"
  peer_cert_file: *etcd_cert_file
  peer_key_file: *etcd_key_file
  peer_trusted_ca_file: *etcd_trusted_ca_file
  download_url: "https://github.com/etcd-io/etcd/releases/download/{{ etcd_version }}/etcd-{{ etcd_version }}-linux-{{'amd64' if ansible_architecture == 'x86_64' else 'arm64' if ansible_architecture == 'aarch64' else ansible_architecture}}.tar.gz"
  bin_dir: /usr/local/bin
  data_dir: /var/cache/etcd/state
  user: etcd
  client_port: 2379
  peer_port: 2380
